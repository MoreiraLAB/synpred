size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
sasa_plots_hs <- QUANTILES$hs %>%
subset(key %in% CURR_ANALYSED) %>%
mutate(key = ifelse(key == 'BSADSARatio',"BSA/DSA",key)) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = HS)) +
geom_point(position = position_dodge(0.8), size = 3.5) +
geom_linerange(position = position_dodge(0.8), size = 1.0) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(face="bold",
size=14, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
sasa_plots_classifier_interface <- QUANTILES$interface %>%
subset(key %in% CURR_ANALYSED) %>%
mutate(key = ifelse(key == 'BSADSARatio',"BSA/DSA",key)) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = classifier_interface)) +
geom_point(position = position_dodge(0.8), size = 3.5) +
geom_linerange(position = position_dodge(0.8), size = 1.0) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(face="bold",
size=14, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
sasa_plots_classifier_interface_hs <- QUANTILES$interface_hs %>%
subset(key %in% CURR_ANALYSED) %>%
mutate(key = ifelse(key == 'BSADSARatio',"BSA/DSA",key)) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = classifier_interface_hs)) +
geom_point(position = position_dodge(0.8), size = 3.5) +
geom_linerange(position = position_dodge(0.8), size = 1.0) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
scale_y_continuous(trans='log10') Â«
CURR_ANALYSED <- list(relDSA = "relDSA",relBSA = "relBSA",BSADSARatio = "BSADSARatio")
sasa_plots_classifier <- QUANTILES$coarse %>%
subset(key %in% CURR_ANALYSED) %>%
mutate(key = ifelse(key == 'BSADSARatio',"BSA/DSA",key)) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = classifier)) +
geom_point(position = position_dodge(0.8), size = 3.5) +
geom_linerange(position = position_dodge(0.8), size = 1.0) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(face="bold",
size=14, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
sasa_plots_hs <- QUANTILES$hs %>%
subset(key %in% CURR_ANALYSED) %>%
mutate(key = ifelse(key == 'BSADSARatio',"BSA/DSA",key)) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = HS)) +
geom_point(position = position_dodge(0.8), size = 3.5) +
geom_linerange(position = position_dodge(0.8), size = 1.0) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(face="bold",
size=14, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
sasa_plots_classifier_interface <- QUANTILES$interface %>%
subset(key %in% CURR_ANALYSED) %>%
mutate(key = ifelse(key == 'BSADSARatio',"BSA/DSA",key)) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = classifier_interface)) +
geom_point(position = position_dodge(0.8), size = 3.5) +
geom_linerange(position = position_dodge(0.8), size = 1.0) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(face="bold",
size=14, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
sasa_plots_classifier_interface_hs <- QUANTILES$interface_hs %>%
subset(key %in% CURR_ANALYSED) %>%
mutate(key = ifelse(key == 'BSADSARatio',"BSA/DSA",key)) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = classifier_interface_hs)) +
geom_point(position = position_dodge(0.8), size = 3.5) +
geom_linerange(position = position_dodge(0.8), size = 1.0) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
scale_y_continuous(trans='log10') +
theme(axis.text.x = element_text(face="bold",
size=14, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=14),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
# png("Plot5a.png",height =  6, width = 14, units= "in", res = 300)
sasa_plots_classifier
# png("Plot5b.png", height =  6, width = 14, units= "in", res = 300)
sasa_plots_classifier_interface
# png("Plot5c.png", height =  6, width = 14, units= "in", res = 300)
sasa_plots_hs
# png("Plot5d.png", height =  6, width = 14, units= "in", res = 300)
sasa_plots_classifier_interface_hs
normalize_columns <- function(input_data, target_columns, norm_table){
norm_vector <- c()
subset_merged <- input_data%>%select(c("residue_name","classifier"))
for(i in 1:nrow(subset_merged)) {
if (i%%1000 == 0){
print(c(i,nrow(subset_merged)))}
row <- subset_merged[i,]
current_res <- row$residue_name
current_loc <- row$classifier
norm_value <- norm_table[norm_table$Residue == current_res,][[current_loc]]
norm_vector <- c(norm_vector, norm_value)
}
for (current_variable in target_columns){
input_data[current_variable] <- input_data[current_variable]*norm_vector
}
return(input_data)
}
spot_on_db_data <- readRDS("SpotOnDB.RDS")
#normalizer <- read.table("spotondb_normalizer.csv", sep = ",", header = TRUE)
#features_to_normalize <- c("b_factor_mean","b_factor_env","fluc_rel")
#normalized_df <- normalize_columns(merged_df_final, features_to_normalize, normalizer)
merged_df_final <- spot_on_db_data$merged_df_final
#merged_df_final <- read.table("normalized_spotondb.csv", header = TRUE, sep = ",")
merged_df_final_full <- spot_on_db_data$merged_df_final_full
merged_df_final <- merged_df_final %>%
mutate(
residue_name = factor(residue_name,
levels = res_names),
classifier_interface = factor(classifier_interface,
levels = c("Interface Rim","Interface Support","Interface Core")),
classifier_interface_hs = factor(
classifier_interface_hs,
levels = c("Interface Rim HS","Interface Rim NS",
"Interface Support HS","Interface Support NS",
"Interface Core HS","Interface Core NS"))
)
merged_df_final %>% subset(classifier == 'Interface') %>% write_csv("interface_data.csv")
# length(unique(merged_df_final$pdb_id))
# dim(merged_df_final)[1]
# length(merged_df_final$HS[merged_df_final$HS == "HS"])
# length(merged_df_final$classifier[merged_df_final$classifier == "Interface"])
QUANTILES <- list(
full = merged_df_final %>%
group_by(residue_name) %>%
summarise_if(.predicate = is.numeric,
.funs = list(q005 = function(x) quantile(x,0.05),
q050 = function(x) quantile(x,0.5),
q095 = function(x) quantile(x,0.95))) %>%
gather("key","value",-residue_name) %>%
mutate(Q = str_match(key,"[0-9A-Za-z]+$")) %>%
mutate(key = substr(key,1,nchar(key)-5)) %>%
spread(key = "Q",value = "value"),
coarse = merged_df_final %>%
group_by(classifier,residue_name) %>%
summarise_if(.predicate = is.numeric,
.funs = list(q005 = function(x) quantile(x,0.05),
q050 = function(x) quantile(x,0.5),
q095 = function(x) quantile(x,0.95))) %>%
gather("key","value",-residue_name,-classifier) %>%
mutate(Q = str_match(key,"[0-9A-Za-z]+$")) %>%
mutate(key = substr(key,1,nchar(key)-5)) %>%
spread(key = "Q",value = "value"),
hs = merged_df_final %>%
subset(classifier == "Interface") %>%
group_by(HS,residue_name) %>%
summarise_if(.predicate = is.numeric,
.funs = list(q005 = function(x) quantile(x,0.05),
q050 = function(x) quantile(x,0.5),
q095 = function(x) quantile(x,0.95))) %>%
gather("key","value",-residue_name,-HS) %>%
mutate(Q = str_match(key,"[0-9A-Za-z]+$")) %>%
mutate(key = substr(key,1,nchar(key)-5)) %>%
spread(key = "Q",value = "value"),
interface = merged_df_final %>%
subset(classifier == "Interface") %>%
group_by(classifier_interface,residue_name) %>%
summarise_if(.predicate = is.numeric,
.funs = list(q005 = function(x) quantile(x,0.05),
q050 = function(x) quantile(x,0.5),
q095 = function(x) quantile(x,0.95))) %>%
gather("key","value",-residue_name,-classifier_interface) %>%
mutate(Q = str_match(key,"[0-9A-Za-z]+$")) %>%
mutate(key = substr(key,1,nchar(key)-5)) %>%
spread(key = "Q",value = "value") %>%
ungroup() %>%
mutate(classifier_interface = factor(classifier_interface,
levels = c("Interface Rim","Interface Support","Interface Core"))),
interface_hs = merged_df_final %>%
subset(classifier == "Interface") %>%
group_by(classifier_interface_hs,residue_name) %>%
summarise_if(.predicate = is.numeric,
.funs = list(q005 = function(x) quantile(x,0.05),
q050 = function(x) quantile(x,0.5),
q095 = function(x) quantile(x,0.95))) %>%
gather("key","value",-residue_name,-classifier_interface_hs) %>%
mutate(Q = str_match(key,"[0-9A-Za-z]+$")) %>%
mutate(key = substr(key,1,nchar(key)-5)) %>%
spread(key = "Q",value = "value") %>%
ungroup() %>%
mutate(classifier_interface_hs = factor(
classifier_interface_hs,
levels = c("Interface Rim HS","Interface Rim NS",
"Interface Support HS","Interface Support NS",
"Interface Core HS","Interface Core NS")))
)
CURR_ANALYSED <- list(b_factor_mean = "b_factor_mean",
fluc_rel = "fluc_rel")
new_names = c(
b_factor_mean = "Disorder (Average B-factor)",
fluc_rel = "Relative fluctuation (NMA)"
)
disorder_plot_coarse <- QUANTILES$coarse %>%
subset(key %in% names(new_names)) %>%
mutate(key = new_names[key]) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = classifier)) +
geom_point(position = position_dodge(0.8), size = 4.0) +
geom_linerange(position = position_dodge(0.8), size = 1.5) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
theme(axis.text.x = element_text(face="bold",
size=18, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=18),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
disorder_plot_hs <- QUANTILES$hs %>%
subset(key %in% names(new_names)) %>%
mutate(key = new_names[key]) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = HS)) +
geom_point(position = position_dodge(0.8), size = 4.0) +
geom_linerange(position = position_dodge(0.8), size = 1.5) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
theme(axis.text.x = element_text(face="bold",
size=18, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=18),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
disorder_plot_interface <- QUANTILES$interface %>%
subset(key %in% names(new_names)) %>%
mutate(key = new_names[key]) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = classifier_interface)) +
geom_point(position = position_dodge(0.8), size = 4.0) +
geom_linerange(position = position_dodge(0.8), size = 1.5) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
theme(axis.text.x = element_text(face="bold",
size=18, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=18),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
disorder_plot_interface_hs <- QUANTILES$interface_hs %>%
subset(key %in% names(new_names)) %>%
mutate(key = new_names[key]) %>%
ggplot(aes(x = residue_name,y = q050,
ymin = q005,ymax = q095,
colour = classifier_interface_hs)) +
geom_point(position = position_dodge(0.8), size = 3.5) +
geom_linerange(position = position_dodge(0.8), size = 1.0) +
facet_wrap(~ key,scales = 'free') +
theme_bw() +
rotate_x_text() +
theme(axis.text.x = element_text(face="bold",
size=18, angle=90),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y = element_text(face="bold",
size=18),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "bottom",
legend.text.align = 0.5,
legend.text=element_text(size=26),
strip.background = element_blank(),
strip.text = element_text(size=26, face = "bold")) +
scale_color_manual(
name = NULL,
values = COLORS
)
# png("Plot4a.png", height =  6, width = 14, units= "in", res = 300)
disorder_plot_coarse
setwd("C:/Users/marti/OneDrive/Documents/GitHub/synpred")
###
#Author: Pedro Matos-Filipe
#Group: Data-Driven Molecular Design
#Group Leader: Irina S. Moreira
#Project: SynPred
###
library(synergyfinder)
library(progress)
calc_synergy <- function(i, data_set, final_df, j) {
ds_in_analysis <- subset(data_set, block_id == i)
numbers <- ds_in_analysis[c(1:8)]
numbers$conc_r <- numbers$conc_r * 1
numbers$conc_C <- numbers$conc_C * 1
numbers$conc_r_unit <- 'nM'
numbers$conc_c_unit <- 'nM'
dose.response.mat <- ReshapeData(numbers, data.type = "viability")
means <- list()
l <- 1
for (kind in c('ZIP', 'Bliss', 'HSA', 'Loewe')) {
synergy.score <- CalculateSynergy(dose.response.mat, method = kind)
y <- synergy.score$scores[[1]]
summary.score <- mean(y[c(2:4), c(2:4)])
means[l] <- summary.score
l <- l + 1
}
means[5] <- levels(ds_in_analysis$drug_row)[[ds_in_analysis$drug_row[[1]]]]
means[6] <-  levels(ds_in_analysis$drug_col)[[ds_in_analysis$drug_col[[1]]]]
means[7] <- levels(ds_in_analysis$cell)[[ds_in_analysis$cell[[1]]]]
means <- unlist(means)
final_df[[j]] <- means
return(final_df)
}
summary_synergy <- function(data_set) {
final_df <- list()
total = length(unique(data_set$block_id))
pb <- progress_bar$new(format = "[:bar] :current/:total (:percent)", total = total)
j <- 1
pb$tick(0)
for (i in unique(data_set$block_id)) {
pb$tick(1)
tryCatch({
final_df <- calc_synergy(i, data_set, final_df, j)
}, error=function(e){})
j <- j + 1
}
k <- as.data.frame(do.call("rbind", final_df))
colnames(k) <- c('ZIP', 'Bliss', 'HSA', 'Loewe', 'Drug1', 'Drug2', 'Cell')
return(k)
}
input_file <- read.csv("datasets/192_combinations.csv", sep = ",")
processed_table <- summary_synergy(input_file)
write.csv(processed_table,"NCI_ALMANAC_synergy_example.csv", row.names = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("synergyfinder")
library(synergyfinder)
q()
